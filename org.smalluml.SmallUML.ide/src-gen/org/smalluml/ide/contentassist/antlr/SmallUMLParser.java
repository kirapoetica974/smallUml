/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.smalluml.ide.contentassist.antlr.internal.InternalSmallUMLParser;
import org.smalluml.services.SmallUMLGrammarAccess;

public class SmallUMLParser extends AbstractContentAssistParser {

	@Inject
	private SmallUMLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSmallUMLParser createParser() {
		InternalSmallUMLParser result = new InternalSmallUMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getClasseAccess().getGroup(), "rule__Classe__Group__0");
					put(grammarAccess.getAttributAccess().getGroup(), "rule__Attribut__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup(), "rule__Methode__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getCardinaliteAccess().getGroup(), "rule__Cardinalite__Group__0");
					put(grammarAccess.getTypeDonneeAccess().getGroup(), "rule__TypeDonnee__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getClasseAccess().getNomClasseAssignment_1(), "rule__Classe__NomClasseAssignment_1");
					put(grammarAccess.getClasseAccess().getAttributsAssignment_5(), "rule__Classe__AttributsAssignment_5");
					put(grammarAccess.getClasseAccess().getMethodesAssignment_9(), "rule__Classe__MethodesAssignment_9");
					put(grammarAccess.getClasseAccess().getCardinalitesAssignment_13(), "rule__Classe__CardinalitesAssignment_13");
					put(grammarAccess.getClasseAccess().getSousClassesAssignment_17(), "rule__Classe__SousClassesAssignment_17");
					put(grammarAccess.getClasseAccess().getSuperClasseAssignment_21(), "rule__Classe__SuperClasseAssignment_21");
					put(grammarAccess.getAttributAccess().getNomAttributAssignment_2(), "rule__Attribut__NomAttributAssignment_2");
					put(grammarAccess.getAttributAccess().getTypeAssignment_3(), "rule__Attribut__TypeAssignment_3");
					put(grammarAccess.getMethodeAccess().getTypeDeRetourAssignment_2(), "rule__Methode__TypeDeRetourAssignment_2");
					put(grammarAccess.getMethodeAccess().getNomMethodeAssignment_3(), "rule__Methode__NomMethodeAssignment_3");
					put(grammarAccess.getMethodeAccess().getParametresAssignment_5(), "rule__Methode__ParametresAssignment_5");
					put(grammarAccess.getAssociationAccess().getNomAssociationAssignment_1(), "rule__Association__NomAssociationAssignment_1");
					put(grammarAccess.getAssociationAccess().getCardinalitesAssignment_3(), "rule__Association__CardinalitesAssignment_3");
					put(grammarAccess.getAssociationAccess().getCardinalitesAssignment_4(), "rule__Association__CardinalitesAssignment_4");
					put(grammarAccess.getElementAccess().getNomElementAssignment(), "rule__Element__NomElementAssignment");
					put(grammarAccess.getCardinaliteAccess().getMultipliciteAssignment_1(), "rule__Cardinalite__MultipliciteAssignment_1");
					put(grammarAccess.getTypeDonneeAccess().getNomTypeAssignment_1(), "rule__TypeDonnee__NomTypeAssignment_1");
					put(grammarAccess.getTypeDonneeAccess().getAttributsAssignment_3(), "rule__TypeDonnee__AttributsAssignment_3");
					put(grammarAccess.getEnumerationAccess().getNomEnumerationAssignment_1(), "rule__Enumeration__NomEnumerationAssignment_1");
					put(grammarAccess.getEnumerationAccess().getElementsAssignment_3(), "rule__Enumeration__ElementsAssignment_3");
					put(grammarAccess.getChaineAccess().getNomTypeAssignment(), "rule__Chaine__NomTypeAssignment");
					put(grammarAccess.getEntierAccess().getNomTypeAssignment(), "rule__Entier__NomTypeAssignment");
					put(grammarAccess.getBooleenAccess().getNomTypeAssignment(), "rule__Booleen__NomTypeAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSmallUMLParser typedParser = (InternalSmallUMLParser) parser;
			typedParser.entryRuleClasse();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmallUMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmallUMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
