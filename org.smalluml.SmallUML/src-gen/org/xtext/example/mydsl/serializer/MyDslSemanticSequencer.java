/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import smalluml.Association;
import smalluml.Attribut;
import smalluml.Booleen;
import smalluml.Cardinalite;
import smalluml.Chaine;
import smalluml.Classe;
import smalluml.Element;
import smalluml.Entier;
import smalluml.Enumeration;
import smalluml.Methode;
import smalluml.SmallumlPackage;
import smalluml.TypeDonnee;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmallumlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmallumlPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case SmallumlPackage.ATTRIBUT:
				sequence_Attribut(context, (Attribut) semanticObject); 
				return; 
			case SmallumlPackage.BOOLEEN:
				sequence_Booleen(context, (Booleen) semanticObject); 
				return; 
			case SmallumlPackage.CARDINALITE:
				sequence_Cardinalite(context, (Cardinalite) semanticObject); 
				return; 
			case SmallumlPackage.CHAINE:
				sequence_Chaine(context, (Chaine) semanticObject); 
				return; 
			case SmallumlPackage.CLASSE:
				sequence_Classe(context, (Classe) semanticObject); 
				return; 
			case SmallumlPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case SmallumlPackage.ENTIER:
				sequence_Entier(context, (Entier) semanticObject); 
				return; 
			case SmallumlPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case SmallumlPackage.METHODE:
				sequence_Methode(context, (Methode) semanticObject); 
				return; 
			case SmallumlPackage.PACKAGE:
				sequence_Package(context, (smalluml.Package) semanticObject); 
				return; 
			case SmallumlPackage.TYPE_DONNEE:
				sequence_TypeDonnee(context, (TypeDonnee) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ElementPackage returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (nom=EString cardinalites+=Cardinalite cardinalites+=Cardinalite+)
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribut returns Attribut
	 *
	 * Constraint:
	 *     (type=Type nom=EString)
	 */
	protected void sequence_Attribut(ISerializationContext context, Attribut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ATTRIBUT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ATTRIBUT__TYPE));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ELEMENT_NOMME__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ELEMENT_NOMME__NOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getAttributAccess().getNomEStringParserRuleCall_2_0(), semanticObject.getNom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Booleen
	 *     Booleen returns Booleen
	 *
	 * Constraint:
	 *     {Booleen}
	 */
	protected void sequence_Booleen(ISerializationContext context, Booleen semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cardinalite returns Cardinalite
	 *
	 * Constraint:
	 *     (nom=EString multipliciteInf=EInt multipliciteSup=EInt)
	 */
	protected void sequence_Cardinalite(ISerializationContext context, Cardinalite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ELEMENT_NOMME__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ELEMENT_NOMME__NOM));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.CARDINALITE__MULTIPLICITE_INF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.CARDINALITE__MULTIPLICITE_INF));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.CARDINALITE__MULTIPLICITE_SUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.CARDINALITE__MULTIPLICITE_SUP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCardinaliteAccess().getNomEStringParserRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getCardinaliteAccess().getMultipliciteInfEIntParserRuleCall_3_0(), semanticObject.getMultipliciteInf());
		feeder.accept(grammarAccess.getCardinaliteAccess().getMultipliciteSupEIntParserRuleCall_5_0(), semanticObject.getMultipliciteSup());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Chaine
	 *     Chaine returns Chaine
	 *
	 * Constraint:
	 *     {Chaine}
	 */
	protected void sequence_Chaine(ISerializationContext context, Chaine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementPackage returns Classe
	 *     Classe returns Classe
	 *
	 * Constraint:
	 *     (
	 *         nom=EString 
	 *         (attributs+=Attribut | cardinalites+=Cardinalite | sousClasses+=Classe | methodes+=Methode)* 
	 *         superClasse=[Classe|ID]? 
	 *         classeAbstraite?=EBoolean
	 *     )
	 */
	protected void sequence_Classe(ISerializationContext context, Classe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     nom=EString
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ELEMENT_NOMME__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ELEMENT_NOMME__NOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementAccess().getNomEStringParserRuleCall_0(), semanticObject.getNom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Entier
	 *     Entier returns Entier
	 *
	 * Constraint:
	 *     {Entier}
	 */
	protected void sequence_Entier(ISerializationContext context, Entier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementPackage returns Enumeration
	 *     Type returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (nom=EString elements+=Element*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Methode returns Methode
	 *
	 * Constraint:
	 *     (typeDeRetour=Type nom=EString parametres+=Attribut* methodeAbstraite?=EBoolean)
	 */
	protected void sequence_Methode(ISerializationContext context, Methode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (nom=EString elementsPackage+=ElementPackage*)
	 */
	protected void sequence_Package(ISerializationContext context, smalluml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementPackage returns TypeDonnee
	 *     Type returns TypeDonnee
	 *     TypeDonnee returns TypeDonnee
	 *
	 * Constraint:
	 *     (nom=EString attributs+=Attribut*)
	 */
	protected void sequence_TypeDonnee(ISerializationContext context, TypeDonnee semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
