/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmallUMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ClasseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Classe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClasseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomClasseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomClasseEStringParserRuleCall_1_0 = (RuleCall)cNomClasseAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAttributsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributsAttributParserRuleCall_5_0 = (RuleCall)cAttributsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cMethodesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMethodesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMethodesMethodeParserRuleCall_9_0 = (RuleCall)cMethodesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cCardinalitesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cCardinalitesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cCardinalitesCardinaliteParserRuleCall_13_0 = (RuleCall)cCardinalitesAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cSousClassesKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cLeftCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cSousClassesAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cSousClassesClasseParserRuleCall_17_0 = (RuleCall)cSousClassesAssignment_17.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cSuperClasseKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cLeftCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cSuperClasseAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final CrossReference cSuperClasseClasseCrossReference_21_0 = (CrossReference)cSuperClasseAssignment_21.eContents().get(0);
		private final RuleCall cSuperClasseClasseIDTerminalRuleCall_21_0_1 = (RuleCall)cSuperClasseClasseCrossReference_21_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Keyword cRightCurlyBracketKeyword_23 = (Keyword)cGroup.eContents().get(23);
		
		//Classe:
		//	'Classe' nomClasse=EString '{'
		//	'Attributs' '{'
		//	attributs+=Attribut*
		//	'}'
		//	'Methodes' '{'
		//	methodes+=Methode*
		//	'}'
		//	'Cardinalites' '{'
		//	cardinalites+=Cardinalite*
		//	'}'
		//	//Abstraite
		//	'Sous-Classes' '{'
		//	sousClasses+=Classe*
		//	'}'
		//	'Super-Classe' '{'
		//	superClasse=[Classe]
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Classe' nomClasse=EString '{' 'Attributs' '{' attributs+=Attribut* '}' 'Methodes' '{' methodes+=Methode* '}'
		//'Cardinalites' '{' cardinalites+=Cardinalite* '}' //Abstraite
		//'Sous-Classes' '{' sousClasses+=Classe* '}' 'Super-Classe' '{' superClasse=[Classe] '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'Classe'
		public Keyword getClasseKeyword_0() { return cClasseKeyword_0; }
		
		//nomClasse=EString
		public Assignment getNomClasseAssignment_1() { return cNomClasseAssignment_1; }
		
		//EString
		public RuleCall getNomClasseEStringParserRuleCall_1_0() { return cNomClasseEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Attributs'
		public Keyword getAttributsKeyword_3() { return cAttributsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//attributs+=Attribut*
		public Assignment getAttributsAssignment_5() { return cAttributsAssignment_5; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_5_0() { return cAttributsAttributParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'Methodes'
		public Keyword getMethodesKeyword_7() { return cMethodesKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//methodes+=Methode*
		public Assignment getMethodesAssignment_9() { return cMethodesAssignment_9; }
		
		//Methode
		public RuleCall getMethodesMethodeParserRuleCall_9_0() { return cMethodesMethodeParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//'Cardinalites'
		public Keyword getCardinalitesKeyword_11() { return cCardinalitesKeyword_11; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }
		
		//cardinalites+=Cardinalite*
		public Assignment getCardinalitesAssignment_13() { return cCardinalitesAssignment_13; }
		
		//Cardinalite
		public RuleCall getCardinalitesCardinaliteParserRuleCall_13_0() { return cCardinalitesCardinaliteParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		////Abstraite
		//'Sous-Classes'
		public Keyword getSousClassesKeyword_15() { return cSousClassesKeyword_15; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_16() { return cLeftCurlyBracketKeyword_16; }
		
		//sousClasses+=Classe*
		public Assignment getSousClassesAssignment_17() { return cSousClassesAssignment_17; }
		
		//Classe
		public RuleCall getSousClassesClasseParserRuleCall_17_0() { return cSousClassesClasseParserRuleCall_17_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
		
		//'Super-Classe'
		public Keyword getSuperClasseKeyword_19() { return cSuperClasseKeyword_19; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_20() { return cLeftCurlyBracketKeyword_20; }
		
		//superClasse=[Classe]
		public Assignment getSuperClasseAssignment_21() { return cSuperClasseAssignment_21; }
		
		//[Classe]
		public CrossReference getSuperClasseClasseCrossReference_21_0() { return cSuperClasseClasseCrossReference_21_0; }
		
		//ID
		public RuleCall getSuperClasseClasseIDTerminalRuleCall_21_0_1() { return cSuperClasseClasseIDTerminalRuleCall_21_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_23() { return cRightCurlyBracketKeyword_23; }
	}
	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Attribut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomAttributAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomAttributEStringParserRuleCall_2_0 = (RuleCall)cNomAttributAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Attribut:
		//	'Attribut' '{'
		//	nomAttribut=EString
		//	type=[Type]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Attribut' '{' nomAttribut=EString type=[Type] '}'
		public Group getGroup() { return cGroup; }
		
		//'Attribut'
		public Keyword getAttributKeyword_0() { return cAttributKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//nomAttribut=EString
		public Assignment getNomAttributAssignment_2() { return cNomAttributAssignment_2; }
		
		//EString
		public RuleCall getNomAttributEStringParserRuleCall_2_0() { return cNomAttributEStringParserRuleCall_2_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_3_0() { return cTypeTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_3_0_1() { return cTypeTypeIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Methode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeDeRetourAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeDeRetourTypeCrossReference_2_0 = (CrossReference)cTypeDeRetourAssignment_2.eContents().get(0);
		private final RuleCall cTypeDeRetourTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeDeRetourTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cNomMethodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNomMethodeEStringParserRuleCall_3_0 = (RuleCall)cNomMethodeAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametresAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametresAttributParserRuleCall_5_0 = (RuleCall)cParametresAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Methode:
		//	'Methode' '{'
		//	typeDeRetour=[Type] nomMethode=EString '('
		//	parametres+=Attribut*
		//	')'
		//	//'Abstraite : ' abstrait?=E
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Methode' '{' typeDeRetour=[Type] nomMethode=EString '(' parametres+=Attribut* ')' //'Abstraite : ' abstrait?=E
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Methode'
		public Keyword getMethodeKeyword_0() { return cMethodeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//typeDeRetour=[Type]
		public Assignment getTypeDeRetourAssignment_2() { return cTypeDeRetourAssignment_2; }
		
		//[Type]
		public CrossReference getTypeDeRetourTypeCrossReference_2_0() { return cTypeDeRetourTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeDeRetourTypeIDTerminalRuleCall_2_0_1() { return cTypeDeRetourTypeIDTerminalRuleCall_2_0_1; }
		
		//nomMethode=EString
		public Assignment getNomMethodeAssignment_3() { return cNomMethodeAssignment_3; }
		
		//EString
		public RuleCall getNomMethodeEStringParserRuleCall_3_0() { return cNomMethodeEStringParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//parametres+=Attribut*
		public Assignment getParametresAssignment_5() { return cParametresAssignment_5; }
		
		//Attribut
		public RuleCall getParametresAttributParserRuleCall_5_0() { return cParametresAttributParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		////'Abstraite : ' abstrait?=E
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssociationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomAssociationEStringParserRuleCall_1_0 = (RuleCall)cNomAssociationAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCardinalitesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardinalitesCardinaliteParserRuleCall_3_0 = (RuleCall)cCardinalitesAssignment_3.eContents().get(0);
		private final Assignment cCardinalitesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCardinalitesCardinaliteParserRuleCall_4_0 = (RuleCall)cCardinalitesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Association:
		//	'Association' nomAssociation=EString '{'
		//	cardinalites+=Cardinalite
		//	cardinalites+=Cardinalite+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Association' nomAssociation=EString '{' cardinalites+=Cardinalite cardinalites+=Cardinalite+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Association'
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }
		
		//nomAssociation=EString
		public Assignment getNomAssociationAssignment_1() { return cNomAssociationAssignment_1; }
		
		//EString
		public RuleCall getNomAssociationEStringParserRuleCall_1_0() { return cNomAssociationEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//cardinalites+=Cardinalite
		public Assignment getCardinalitesAssignment_3() { return cCardinalitesAssignment_3; }
		
		//Cardinalite
		public RuleCall getCardinalitesCardinaliteParserRuleCall_3_0() { return cCardinalitesCardinaliteParserRuleCall_3_0; }
		
		//cardinalites+=Cardinalite+
		public Assignment getCardinalitesAssignment_4() { return cCardinalitesAssignment_4; }
		
		//Cardinalite
		public RuleCall getCardinalitesCardinaliteParserRuleCall_4_0() { return cCardinalitesCardinaliteParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChaineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeDonneeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	Chaine | Booleen | Entier | TypeDonnee | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//Chaine | Booleen | Entier | TypeDonnee | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Chaine
		public RuleCall getChaineParserRuleCall_0() { return cChaineParserRuleCall_0; }
		
		//Booleen
		public RuleCall getBooleenParserRuleCall_1() { return cBooleenParserRuleCall_1; }
		
		//Entier
		public RuleCall getEntierParserRuleCall_2() { return cEntierParserRuleCall_2; }
		
		//TypeDonnee
		public RuleCall getTypeDonneeParserRuleCall_3() { return cTypeDonneeParserRuleCall_3; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_4() { return cEnumerationParserRuleCall_4; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Element");
		private final Assignment cNomElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNomElementEStringParserRuleCall_0 = (RuleCall)cNomElementAssignment.eContents().get(0);
		
		//Element:
		//	nomElement=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//nomElement=EString
		public Assignment getNomElementAssignment() { return cNomElementAssignment; }
		
		//EString
		public RuleCall getNomElementEStringParserRuleCall_0() { return cNomElementEStringParserRuleCall_0; }
	}
	public class CardinaliteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Cardinalite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMultipliciteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultipliciteEStringParserRuleCall_1_0 = (RuleCall)cMultipliciteAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Cardinalite:
		//	'[' multiplicite=EString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' multiplicite=EString ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//multiplicite=EString
		public Assignment getMultipliciteAssignment_1() { return cMultipliciteAssignment_1; }
		
		//EString
		public RuleCall getMultipliciteEStringParserRuleCall_1_0() { return cMultipliciteEStringParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class TypeDonneeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.TypeDonnee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeDonneeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomTypeEStringParserRuleCall_1_0 = (RuleCall)cNomTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributsAttributParserRuleCall_3_0 = (RuleCall)cAttributsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypeDonnee:
		//	'TypeDonnee' nomType=EString '{'
		//	attributs+=Attribut*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TypeDonnee' nomType=EString '{' attributs+=Attribut* '}'
		public Group getGroup() { return cGroup; }
		
		//'TypeDonnee'
		public Keyword getTypeDonneeKeyword_0() { return cTypeDonneeKeyword_0; }
		
		//nomType=EString
		public Assignment getNomTypeAssignment_1() { return cNomTypeAssignment_1; }
		
		//EString
		public RuleCall getNomTypeEStringParserRuleCall_1_0() { return cNomTypeEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributs+=Attribut*
		public Assignment getAttributsAssignment_3() { return cAttributsAssignment_3; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_3_0() { return cAttributsAttributParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomEnumerationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEnumerationEStringParserRuleCall_1_0 = (RuleCall)cNomEnumerationAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumeration:
		//	'Enumeration' nomEnumeration=EString '{'
		//	elements+=Element*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Enumeration' nomEnumeration=EString '{' elements+=Element* '}'
		public Group getGroup() { return cGroup; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//nomEnumeration=EString
		public Assignment getNomEnumerationAssignment_1() { return cNomEnumerationAssignment_1; }
		
		//EString
		public RuleCall getNomEnumerationEStringParserRuleCall_1_0() { return cNomEnumerationEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_0() { return cElementsElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ChaineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Chaine");
		private final Assignment cNomTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNomTypeChaineKeyword_0 = (Keyword)cNomTypeAssignment.eContents().get(0);
		
		//Chaine:
		//	nomType='Chaine';
		@Override public ParserRule getRule() { return rule; }
		
		//nomType='Chaine'
		public Assignment getNomTypeAssignment() { return cNomTypeAssignment; }
		
		//'Chaine'
		public Keyword getNomTypeChaineKeyword_0() { return cNomTypeChaineKeyword_0; }
	}
	public class EntierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Entier");
		private final Assignment cNomTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNomTypeEntierKeyword_0 = (Keyword)cNomTypeAssignment.eContents().get(0);
		
		//Entier:
		//	nomType='Entier';
		@Override public ParserRule getRule() { return rule; }
		
		//nomType='Entier'
		public Assignment getNomTypeAssignment() { return cNomTypeAssignment; }
		
		//'Entier'
		public Keyword getNomTypeEntierKeyword_0() { return cNomTypeEntierKeyword_0; }
	}
	public class BooleenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Booleen");
		private final Assignment cNomTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNomTypeBooleenKeyword_0 = (Keyword)cNomTypeAssignment.eContents().get(0);
		
		//Booleen:
		//	nomType='Booleen';
		@Override public ParserRule getRule() { return rule; }
		
		//nomType='Booleen'
		public Assignment getNomTypeAssignment() { return cNomTypeAssignment; }
		
		//'Booleen'
		public Keyword getNomTypeBooleenKeyword_0() { return cNomTypeBooleenKeyword_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ClasseElements pClasse;
	private final AttributElements pAttribut;
	private final MethodeElements pMethode;
	private final AssociationElements pAssociation;
	private final TypeElements pType;
	private final ElementElements pElement;
	private final CardinaliteElements pCardinalite;
	private final TypeDonneeElements pTypeDonnee;
	private final EnumerationElements pEnumeration;
	private final ChaineElements pChaine;
	private final EntierElements pEntier;
	private final BooleenElements pBooleen;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallUMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pClasse = new ClasseElements();
		this.pAttribut = new AttributElements();
		this.pMethode = new MethodeElements();
		this.pAssociation = new AssociationElements();
		this.pType = new TypeElements();
		this.pElement = new ElementElements();
		this.pCardinalite = new CardinaliteElements();
		this.pTypeDonnee = new TypeDonneeElements();
		this.pEnumeration = new EnumerationElements();
		this.pChaine = new ChaineElements();
		this.pEntier = new EntierElements();
		this.pBooleen = new BooleenElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.smalluml.SmallUML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Classe:
	//	'Classe' nomClasse=EString '{'
	//	'Attributs' '{'
	//	attributs+=Attribut*
	//	'}'
	//	'Methodes' '{'
	//	methodes+=Methode*
	//	'}'
	//	'Cardinalites' '{'
	//	cardinalites+=Cardinalite*
	//	'}'
	//	//Abstraite
	//	'Sous-Classes' '{'
	//	sousClasses+=Classe*
	//	'}'
	//	'Super-Classe' '{'
	//	superClasse=[Classe]
	//	'}'
	//	'}';
	public ClasseElements getClasseAccess() {
		return pClasse;
	}
	
	public ParserRule getClasseRule() {
		return getClasseAccess().getRule();
	}
	
	//Attribut:
	//	'Attribut' '{'
	//	nomAttribut=EString
	//	type=[Type]
	//	'}';
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}
	
	//Methode:
	//	'Methode' '{'
	//	typeDeRetour=[Type] nomMethode=EString '('
	//	parametres+=Attribut*
	//	')'
	//	//'Abstraite : ' abstrait?=E
	//	'}';
	public MethodeElements getMethodeAccess() {
		return pMethode;
	}
	
	public ParserRule getMethodeRule() {
		return getMethodeAccess().getRule();
	}
	
	//Association:
	//	'Association' nomAssociation=EString '{'
	//	cardinalites+=Cardinalite
	//	cardinalites+=Cardinalite+
	//	'}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Type:
	//	Chaine | Booleen | Entier | TypeDonnee | Enumeration;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Element:
	//	nomElement=EString;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Cardinalite:
	//	'[' multiplicite=EString ']';
	public CardinaliteElements getCardinaliteAccess() {
		return pCardinalite;
	}
	
	public ParserRule getCardinaliteRule() {
		return getCardinaliteAccess().getRule();
	}
	
	//TypeDonnee:
	//	'TypeDonnee' nomType=EString '{'
	//	attributs+=Attribut*
	//	'}';
	public TypeDonneeElements getTypeDonneeAccess() {
		return pTypeDonnee;
	}
	
	public ParserRule getTypeDonneeRule() {
		return getTypeDonneeAccess().getRule();
	}
	
	//Enumeration:
	//	'Enumeration' nomEnumeration=EString '{'
	//	elements+=Element*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//Chaine:
	//	nomType='Chaine';
	public ChaineElements getChaineAccess() {
		return pChaine;
	}
	
	public ParserRule getChaineRule() {
		return getChaineAccess().getRule();
	}
	
	//Entier:
	//	nomType='Entier';
	public EntierElements getEntierAccess() {
		return pEntier;
	}
	
	public ParserRule getEntierRule() {
		return getEntierAccess().getRule();
	}
	
	//Booleen:
	//	nomType='Booleen';
	public BooleenElements getBooleenAccess() {
		return pBooleen;
	}
	
	public ParserRule getBooleenRule() {
		return getBooleenAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
