/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomEStringParserRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsPackageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsPackageElementPackageParserRuleCall_4_0 = (RuleCall)cElementsPackageAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Package:
		//	{Package}
		//	'Package' nom=EString '{'
		//	elementsPackage+=ElementPackage*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Package} 'Package' nom=EString '{' elementsPackage+=ElementPackage* '}'
		public Group getGroup() { return cGroup; }
		
		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }
		
		//'Package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//nom=EString
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_2_0() { return cNomEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elementsPackage+=ElementPackage*
		public Assignment getElementsPackageAssignment_4() { return cElementsPackageAssignment_4; }
		
		//ElementPackage
		public RuleCall getElementsPackageElementPackageParserRuleCall_4_0() { return cElementsPackageElementPackageParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ElementPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementPackage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClasseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeDonneeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ElementPackage:
		//	Classe | Association | Enumeration | TypeDonnee;
		@Override public ParserRule getRule() { return rule; }
		
		//Classe | Association | Enumeration | TypeDonnee
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Classe
		public RuleCall getClasseParserRuleCall_0() { return cClasseParserRuleCall_0; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_1() { return cAssociationParserRuleCall_1; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
		
		//TypeDonnee
		public RuleCall getTypeDonneeParserRuleCall_3() { return cTypeDonneeParserRuleCall_3; }
	}
	public class ClasseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Classe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClasseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClasseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomEStringParserRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAttributsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAttributsAttributParserRuleCall_4_0_0 = (RuleCall)cAttributsAssignment_4_0.eContents().get(0);
		private final Assignment cCardinalitesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cCardinalitesCardinaliteParserRuleCall_4_1_0 = (RuleCall)cCardinalitesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cSousClasseKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSousClassesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSousClassesClasseParserRuleCall_4_2_1_0 = (RuleCall)cSousClassesAssignment_4_2_1.eContents().get(0);
		private final Assignment cMethodesAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cMethodesMethodeParserRuleCall_4_3_0 = (RuleCall)cMethodesAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSuperClasseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperClasseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSuperClasseClasseCrossReference_5_1_0 = (CrossReference)cSuperClasseAssignment_5_1.eContents().get(0);
		private final RuleCall cSuperClasseClasseIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSuperClasseClasseCrossReference_5_1_0.eContents().get(1);
		private final Keyword cAbstraiteKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cClasseAbstraiteAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cClasseAbstraiteEBooleanParserRuleCall_7_0 = (RuleCall)cClasseAbstraiteAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Classe:
		//	{Classe}
		//	'Classe' nom=EString '{' (attributs+=Attribut | cardinalites+=Cardinalite | 'Sous-Classe' sousClasses+=Classe |
		//	methodes+=Methode)* ('Super-Classe' superClasse=[Classe])?
		//	'Abstraite=' classeAbstraite?=EBoolean
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Classe} 'Classe' nom=EString '{' (attributs+=Attribut | cardinalites+=Cardinalite | 'Sous-Classe' sousClasses+=Classe |
		//methodes+=Methode)* ('Super-Classe' superClasse=[Classe])? 'Abstraite=' classeAbstraite?=EBoolean '}'
		public Group getGroup() { return cGroup; }
		
		//{Classe}
		public Action getClasseAction_0() { return cClasseAction_0; }
		
		//'Classe'
		public Keyword getClasseKeyword_1() { return cClasseKeyword_1; }
		
		//nom=EString
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_2_0() { return cNomEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(attributs+=Attribut | cardinalites+=Cardinalite | 'Sous-Classe' sousClasses+=Classe | methodes+=Methode)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//attributs+=Attribut
		public Assignment getAttributsAssignment_4_0() { return cAttributsAssignment_4_0; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_4_0_0() { return cAttributsAttributParserRuleCall_4_0_0; }
		
		//cardinalites+=Cardinalite
		public Assignment getCardinalitesAssignment_4_1() { return cCardinalitesAssignment_4_1; }
		
		//Cardinalite
		public RuleCall getCardinalitesCardinaliteParserRuleCall_4_1_0() { return cCardinalitesCardinaliteParserRuleCall_4_1_0; }
		
		//'Sous-Classe' sousClasses+=Classe
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'Sous-Classe'
		public Keyword getSousClasseKeyword_4_2_0() { return cSousClasseKeyword_4_2_0; }
		
		//sousClasses+=Classe
		public Assignment getSousClassesAssignment_4_2_1() { return cSousClassesAssignment_4_2_1; }
		
		//Classe
		public RuleCall getSousClassesClasseParserRuleCall_4_2_1_0() { return cSousClassesClasseParserRuleCall_4_2_1_0; }
		
		//methodes+=Methode
		public Assignment getMethodesAssignment_4_3() { return cMethodesAssignment_4_3; }
		
		//Methode
		public RuleCall getMethodesMethodeParserRuleCall_4_3_0() { return cMethodesMethodeParserRuleCall_4_3_0; }
		
		//('Super-Classe' superClasse=[Classe])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Super-Classe'
		public Keyword getSuperClasseKeyword_5_0() { return cSuperClasseKeyword_5_0; }
		
		//superClasse=[Classe]
		public Assignment getSuperClasseAssignment_5_1() { return cSuperClasseAssignment_5_1; }
		
		//[Classe]
		public CrossReference getSuperClasseClasseCrossReference_5_1_0() { return cSuperClasseClasseCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSuperClasseClasseIDTerminalRuleCall_5_1_0_1() { return cSuperClasseClasseIDTerminalRuleCall_5_1_0_1; }
		
		//'Abstraite='
		public Keyword getAbstraiteKeyword_6() { return cAbstraiteKeyword_6; }
		
		//classeAbstraite?=EBoolean
		public Assignment getClasseAbstraiteAssignment_7() { return cClasseAbstraiteAssignment_7; }
		
		//EBoolean
		public RuleCall getClasseAbstraiteEBooleanParserRuleCall_7_0() { return cClasseAbstraiteEBooleanParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomEStringParserRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		
		//Attribut:
		//	'Attribut' type=Type nom=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Attribut' type=Type nom=EString
		public Group getGroup() { return cGroup; }
		
		//'Attribut'
		public Keyword getAttributKeyword_0() { return cAttributKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//nom=EString
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_2_0() { return cNomEStringParserRuleCall_2_0; }
	}
	public class MethodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Methode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMethodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeDeRetourAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDeRetourTypeParserRuleCall_2_0 = (RuleCall)cTypeDeRetourAssignment_2.eContents().get(0);
		private final Assignment cNomAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNomEStringParserRuleCall_3_0 = (RuleCall)cNomAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametresAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametresAttributParserRuleCall_5_0 = (RuleCall)cParametresAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cAbstraiteKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMethodeAbstraiteAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMethodeAbstraiteEBooleanParserRuleCall_8_0 = (RuleCall)cMethodeAbstraiteAssignment_8.eContents().get(0);
		
		//Methode:
		//	{Methode}
		//	'Methode' typeDeRetour=Type nom=EString '(' parametres+=Attribut* ')' 'Abstraite=' methodeAbstraite?=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//{Methode} 'Methode' typeDeRetour=Type nom=EString '(' parametres+=Attribut* ')' 'Abstraite=' methodeAbstraite?=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{Methode}
		public Action getMethodeAction_0() { return cMethodeAction_0; }
		
		//'Methode'
		public Keyword getMethodeKeyword_1() { return cMethodeKeyword_1; }
		
		//typeDeRetour=Type
		public Assignment getTypeDeRetourAssignment_2() { return cTypeDeRetourAssignment_2; }
		
		//Type
		public RuleCall getTypeDeRetourTypeParserRuleCall_2_0() { return cTypeDeRetourTypeParserRuleCall_2_0; }
		
		//nom=EString
		public Assignment getNomAssignment_3() { return cNomAssignment_3; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_3_0() { return cNomEStringParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//parametres+=Attribut*
		public Assignment getParametresAssignment_5() { return cParametresAssignment_5; }
		
		//Attribut
		public RuleCall getParametresAttributParserRuleCall_5_0() { return cParametresAttributParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'Abstraite='
		public Keyword getAbstraiteKeyword_7() { return cAbstraiteKeyword_7; }
		
		//methodeAbstraite?=EBoolean
		public Assignment getMethodeAbstraiteAssignment_8() { return cMethodeAbstraiteAssignment_8; }
		
		//EBoolean
		public RuleCall getMethodeAbstraiteEBooleanParserRuleCall_8_0() { return cMethodeAbstraiteEBooleanParserRuleCall_8_0; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssociationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssociationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomEStringParserRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCardinalitesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCardinalitesCardinaliteParserRuleCall_4_0 = (RuleCall)cCardinalitesAssignment_4.eContents().get(0);
		private final Assignment cCardinalitesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCardinalitesCardinaliteParserRuleCall_5_0 = (RuleCall)cCardinalitesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Association:
		//	{Association}
		//	'Association' nom=EString '{'
		//	cardinalites+=Cardinalite
		//	cardinalites+=Cardinalite+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Association} 'Association' nom=EString '{' cardinalites+=Cardinalite cardinalites+=Cardinalite+ '}'
		public Group getGroup() { return cGroup; }
		
		//{Association}
		public Action getAssociationAction_0() { return cAssociationAction_0; }
		
		//'Association'
		public Keyword getAssociationKeyword_1() { return cAssociationKeyword_1; }
		
		//nom=EString
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_2_0() { return cNomEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//cardinalites+=Cardinalite
		public Assignment getCardinalitesAssignment_4() { return cCardinalitesAssignment_4; }
		
		//Cardinalite
		public RuleCall getCardinalitesCardinaliteParserRuleCall_4_0() { return cCardinalitesCardinaliteParserRuleCall_4_0; }
		
		//cardinalites+=Cardinalite+
		public Assignment getCardinalitesAssignment_5() { return cCardinalitesAssignment_5; }
		
		//Cardinalite
		public RuleCall getCardinalitesCardinaliteParserRuleCall_5_0() { return cCardinalitesCardinaliteParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChaineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeDonneeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	Chaine | Booleen | Entier | TypeDonnee | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//Chaine | Booleen | Entier | TypeDonnee | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Chaine
		public RuleCall getChaineParserRuleCall_0() { return cChaineParserRuleCall_0; }
		
		//Booleen
		public RuleCall getBooleenParserRuleCall_1() { return cBooleenParserRuleCall_1; }
		
		//Entier
		public RuleCall getEntierParserRuleCall_2() { return cEntierParserRuleCall_2; }
		
		//TypeDonnee
		public RuleCall getTypeDonneeParserRuleCall_3() { return cTypeDonneeParserRuleCall_3; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_4() { return cEnumerationParserRuleCall_4; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Assignment cNomAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_0 = (RuleCall)cNomAssignment.eContents().get(0);
		
		//Element:
		//	nom=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//nom=EString
		public Assignment getNomAssignment() { return cNomAssignment; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_0() { return cNomEStringParserRuleCall_0; }
	}
	public class CardinaliteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Cardinalite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultipliciteInfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultipliciteInfEIntParserRuleCall_3_0 = (RuleCall)cMultipliciteInfAssignment_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMultipliciteSupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMultipliciteSupEIntParserRuleCall_5_0 = (RuleCall)cMultipliciteSupAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Cardinalite:
		//	'Role' nom=EString '[' multipliciteInf=EInt '..' multipliciteSup=EInt ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Role' nom=EString '[' multipliciteInf=EInt '..' multipliciteSup=EInt ']'
		public Group getGroup() { return cGroup; }
		
		//'Role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//nom=EString
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_1_0() { return cNomEStringParserRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//multipliciteInf=EInt
		public Assignment getMultipliciteInfAssignment_3() { return cMultipliciteInfAssignment_3; }
		
		//EInt
		public RuleCall getMultipliciteInfEIntParserRuleCall_3_0() { return cMultipliciteInfEIntParserRuleCall_3_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_4() { return cFullStopFullStopKeyword_4; }
		
		//multipliciteSup=EInt
		public Assignment getMultipliciteSupAssignment_5() { return cMultipliciteSupAssignment_5; }
		
		//EInt
		public RuleCall getMultipliciteSupEIntParserRuleCall_5_0() { return cMultipliciteSupEIntParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class TypeDonneeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDonnee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeDonneeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeDonneeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomEStringParserRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributsAttributParserRuleCall_4_0 = (RuleCall)cAttributsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeDonnee:
		//	{TypeDonnee}
		//	'TypeDonnee' nom=EString '{'
		//	attributs+=Attribut*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeDonnee} 'TypeDonnee' nom=EString '{' attributs+=Attribut* '}'
		public Group getGroup() { return cGroup; }
		
		//{TypeDonnee}
		public Action getTypeDonneeAction_0() { return cTypeDonneeAction_0; }
		
		//'TypeDonnee'
		public Keyword getTypeDonneeKeyword_1() { return cTypeDonneeKeyword_1; }
		
		//nom=EString
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_2_0() { return cNomEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//attributs+=Attribut*
		public Assignment getAttributsAssignment_4() { return cAttributsAssignment_4; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_4_0() { return cAttributsAttributParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomEStringParserRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration:
		//	{Enumeration}
		//	'Enumeration' nom=EString '{'
		//	elements+=Element*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Enumeration} 'Enumeration' nom=EString '{' elements+=Element* '}'
		public Group getGroup() { return cGroup; }
		
		//{Enumeration}
		public Action getEnumerationAction_0() { return cEnumerationAction_0; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_1() { return cEnumerationKeyword_1; }
		
		//nom=EString
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_2_0() { return cNomEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_4_0() { return cElementsElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ChaineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Chaine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChaineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChaineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Chaine:
		//	{Chaine}
		//	'Chaine';
		@Override public ParserRule getRule() { return rule; }
		
		//{Chaine} 'Chaine'
		public Group getGroup() { return cGroup; }
		
		//{Chaine}
		public Action getChaineAction_0() { return cChaineAction_0; }
		
		//'Chaine'
		public Keyword getChaineKeyword_1() { return cChaineKeyword_1; }
	}
	public class EntierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Entier:
		//	{Entier}
		//	'Entier';
		@Override public ParserRule getRule() { return rule; }
		
		//{Entier} 'Entier'
		public Group getGroup() { return cGroup; }
		
		//{Entier}
		public Action getEntierAction_0() { return cEntierAction_0; }
		
		//'Entier'
		public Keyword getEntierKeyword_1() { return cEntierKeyword_1; }
	}
	public class BooleenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Booleen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Booleen:
		//	{Booleen}
		//	'Booleen';
		@Override public ParserRule getRule() { return rule; }
		
		//{Booleen} 'Booleen'
		public Group getGroup() { return cGroup; }
		
		//{Booleen}
		public Action getBooleenAction_0() { return cBooleenAction_0; }
		
		//'Booleen'
		public Keyword getBooleenKeyword_1() { return cBooleenKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVraiKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFauxKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'Vrai' | 'Faux'
		@Override public ParserRule getRule() { return rule; }
		
		//'Vrai' | 'Faux'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Vrai'
		public Keyword getVraiKeyword_0() { return cVraiKeyword_0; }
		
		//'Faux'
		public Keyword getFauxKeyword_1() { return cFauxKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final PackageElements pPackage;
	private final ElementPackageElements pElementPackage;
	private final ClasseElements pClasse;
	private final AttributElements pAttribut;
	private final MethodeElements pMethode;
	private final AssociationElements pAssociation;
	private final TypeElements pType;
	private final ElementElements pElement;
	private final CardinaliteElements pCardinalite;
	private final TypeDonneeElements pTypeDonnee;
	private final EnumerationElements pEnumeration;
	private final ChaineElements pChaine;
	private final EntierElements pEntier;
	private final BooleenElements pBooleen;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPackage = new PackageElements();
		this.pElementPackage = new ElementPackageElements();
		this.pClasse = new ClasseElements();
		this.pAttribut = new AttributElements();
		this.pMethode = new MethodeElements();
		this.pAssociation = new AssociationElements();
		this.pType = new TypeElements();
		this.pElement = new ElementElements();
		this.pCardinalite = new CardinaliteElements();
		this.pTypeDonnee = new TypeDonneeElements();
		this.pEnumeration = new EnumerationElements();
		this.pChaine = new ChaineElements();
		this.pEntier = new EntierElements();
		this.pBooleen = new BooleenElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Package:
	//	{Package}
	//	'Package' nom=EString '{'
	//	elementsPackage+=ElementPackage*
	//	'}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//ElementPackage:
	//	Classe | Association | Enumeration | TypeDonnee;
	public ElementPackageElements getElementPackageAccess() {
		return pElementPackage;
	}
	
	public ParserRule getElementPackageRule() {
		return getElementPackageAccess().getRule();
	}
	
	//Classe:
	//	{Classe}
	//	'Classe' nom=EString '{' (attributs+=Attribut | cardinalites+=Cardinalite | 'Sous-Classe' sousClasses+=Classe |
	//	methodes+=Methode)* ('Super-Classe' superClasse=[Classe])?
	//	'Abstraite=' classeAbstraite?=EBoolean
	//	'}';
	public ClasseElements getClasseAccess() {
		return pClasse;
	}
	
	public ParserRule getClasseRule() {
		return getClasseAccess().getRule();
	}
	
	//Attribut:
	//	'Attribut' type=Type nom=EString;
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}
	
	//Methode:
	//	{Methode}
	//	'Methode' typeDeRetour=Type nom=EString '(' parametres+=Attribut* ')' 'Abstraite=' methodeAbstraite?=EBoolean;
	public MethodeElements getMethodeAccess() {
		return pMethode;
	}
	
	public ParserRule getMethodeRule() {
		return getMethodeAccess().getRule();
	}
	
	//Association:
	//	{Association}
	//	'Association' nom=EString '{'
	//	cardinalites+=Cardinalite
	//	cardinalites+=Cardinalite+
	//	'}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Type:
	//	Chaine | Booleen | Entier | TypeDonnee | Enumeration;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Element:
	//	nom=EString;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Cardinalite:
	//	'Role' nom=EString '[' multipliciteInf=EInt '..' multipliciteSup=EInt ']';
	public CardinaliteElements getCardinaliteAccess() {
		return pCardinalite;
	}
	
	public ParserRule getCardinaliteRule() {
		return getCardinaliteAccess().getRule();
	}
	
	//TypeDonnee:
	//	{TypeDonnee}
	//	'TypeDonnee' nom=EString '{'
	//	attributs+=Attribut*
	//	'}';
	public TypeDonneeElements getTypeDonneeAccess() {
		return pTypeDonnee;
	}
	
	public ParserRule getTypeDonneeRule() {
		return getTypeDonneeAccess().getRule();
	}
	
	//Enumeration:
	//	{Enumeration}
	//	'Enumeration' nom=EString '{'
	//	elements+=Element*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//Chaine:
	//	{Chaine}
	//	'Chaine';
	public ChaineElements getChaineAccess() {
		return pChaine;
	}
	
	public ParserRule getChaineRule() {
		return getChaineAccess().getRule();
	}
	
	//Entier:
	//	{Entier}
	//	'Entier';
	public EntierElements getEntierAccess() {
		return pEntier;
	}
	
	public ParserRule getEntierRule() {
		return getEntierAccess().getRule();
	}
	
	//Booleen:
	//	{Booleen}
	//	'Booleen';
	public BooleenElements getBooleenAccess() {
		return pBooleen;
	}
	
	public ParserRule getBooleenRule() {
		return getBooleenAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'Vrai' | 'Faux'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
