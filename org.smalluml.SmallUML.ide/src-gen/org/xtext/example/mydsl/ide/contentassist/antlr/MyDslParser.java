/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementPackageAccess().getAlternatives(), "rule__ElementPackage__Alternatives");
					put(grammarAccess.getClasseAccess().getAlternatives_4(), "rule__Classe__Alternatives_4");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getClasseAccess().getGroup(), "rule__Classe__Group__0");
					put(grammarAccess.getClasseAccess().getGroup_4_2(), "rule__Classe__Group_4_2__0");
					put(grammarAccess.getClasseAccess().getGroup_5(), "rule__Classe__Group_5__0");
					put(grammarAccess.getAttributAccess().getGroup(), "rule__Attribut__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup(), "rule__Methode__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getCardinaliteAccess().getGroup(), "rule__Cardinalite__Group__0");
					put(grammarAccess.getTypeDonneeAccess().getGroup(), "rule__TypeDonnee__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getChaineAccess().getGroup(), "rule__Chaine__Group__0");
					put(grammarAccess.getEntierAccess().getGroup(), "rule__Entier__Group__0");
					put(grammarAccess.getBooleenAccess().getGroup(), "rule__Booleen__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getPackageAccess().getNomAssignment_2(), "rule__Package__NomAssignment_2");
					put(grammarAccess.getPackageAccess().getElementsPackageAssignment_4(), "rule__Package__ElementsPackageAssignment_4");
					put(grammarAccess.getClasseAccess().getNomAssignment_2(), "rule__Classe__NomAssignment_2");
					put(grammarAccess.getClasseAccess().getAttributsAssignment_4_0(), "rule__Classe__AttributsAssignment_4_0");
					put(grammarAccess.getClasseAccess().getCardinalitesAssignment_4_1(), "rule__Classe__CardinalitesAssignment_4_1");
					put(grammarAccess.getClasseAccess().getSousClassesAssignment_4_2_1(), "rule__Classe__SousClassesAssignment_4_2_1");
					put(grammarAccess.getClasseAccess().getMethodesAssignment_4_3(), "rule__Classe__MethodesAssignment_4_3");
					put(grammarAccess.getClasseAccess().getSuperClasseAssignment_5_1(), "rule__Classe__SuperClasseAssignment_5_1");
					put(grammarAccess.getClasseAccess().getClasseAbstraiteAssignment_7(), "rule__Classe__ClasseAbstraiteAssignment_7");
					put(grammarAccess.getAttributAccess().getTypeAssignment_1(), "rule__Attribut__TypeAssignment_1");
					put(grammarAccess.getAttributAccess().getNomAssignment_2(), "rule__Attribut__NomAssignment_2");
					put(grammarAccess.getMethodeAccess().getTypeDeRetourAssignment_2(), "rule__Methode__TypeDeRetourAssignment_2");
					put(grammarAccess.getMethodeAccess().getNomAssignment_3(), "rule__Methode__NomAssignment_3");
					put(grammarAccess.getMethodeAccess().getParametresAssignment_5(), "rule__Methode__ParametresAssignment_5");
					put(grammarAccess.getMethodeAccess().getMethodeAbstraiteAssignment_8(), "rule__Methode__MethodeAbstraiteAssignment_8");
					put(grammarAccess.getAssociationAccess().getNomAssignment_2(), "rule__Association__NomAssignment_2");
					put(grammarAccess.getAssociationAccess().getCardinalitesAssignment_4(), "rule__Association__CardinalitesAssignment_4");
					put(grammarAccess.getAssociationAccess().getCardinalitesAssignment_5(), "rule__Association__CardinalitesAssignment_5");
					put(grammarAccess.getElementAccess().getNomAssignment(), "rule__Element__NomAssignment");
					put(grammarAccess.getCardinaliteAccess().getNomAssignment_1(), "rule__Cardinalite__NomAssignment_1");
					put(grammarAccess.getCardinaliteAccess().getMultipliciteInfAssignment_3(), "rule__Cardinalite__MultipliciteInfAssignment_3");
					put(grammarAccess.getCardinaliteAccess().getMultipliciteSupAssignment_5(), "rule__Cardinalite__MultipliciteSupAssignment_5");
					put(grammarAccess.getTypeDonneeAccess().getNomAssignment_2(), "rule__TypeDonnee__NomAssignment_2");
					put(grammarAccess.getTypeDonneeAccess().getAttributsAssignment_4(), "rule__TypeDonnee__AttributsAssignment_4");
					put(grammarAccess.getEnumerationAccess().getNomAssignment_2(), "rule__Enumeration__NomAssignment_2");
					put(grammarAccess.getEnumerationAccess().getElementsAssignment_4(), "rule__Enumeration__ElementsAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRulePackage();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
