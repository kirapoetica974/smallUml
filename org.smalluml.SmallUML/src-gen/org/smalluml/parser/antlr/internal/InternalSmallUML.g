/*
 * generated by Xtext 2.10.0
 */
grammar InternalSmallUML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.smalluml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.smalluml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.smalluml.services.SmallUMLGrammarAccess;

}

@parser::members {

 	private SmallUMLGrammarAccess grammarAccess;

    public InternalSmallUMLParser(TokenStream input, SmallUMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Classe";
   	}

   	@Override
   	protected SmallUMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleClasse
entryRuleClasse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClasseRule()); }
	iv_ruleClasse=ruleClasse
	{ $current=$iv_ruleClasse.current; }
	EOF;

// Rule Classe
ruleClasse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Classe'
		{
			newLeafNode(otherlv_0, grammarAccess.getClasseAccess().getClasseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClasseAccess().getNomClasseEStringParserRuleCall_1_0());
				}
				lv_nomClasse_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClasseRule());
					}
					set(
						$current,
						"nomClasse",
						lv_nomClasse_1_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='Attributs'
		{
			newLeafNode(otherlv_3, grammarAccess.getClasseAccess().getAttributsKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClasseAccess().getAttributsAttributParserRuleCall_5_0());
				}
				lv_attributs_5_0=ruleAttribut
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClasseRule());
					}
					add(
						$current,
						"attributs",
						lv_attributs_5_0,
						"org.smalluml.SmallUML.Attribut");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_6());
		}
		otherlv_7='Methodes'
		{
			newLeafNode(otherlv_7, grammarAccess.getClasseAccess().getMethodesKeyword_7());
		}
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClasseAccess().getMethodesMethodeParserRuleCall_9_0());
				}
				lv_methodes_9_0=ruleMethode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClasseRule());
					}
					add(
						$current,
						"methodes",
						lv_methodes_9_0,
						"org.smalluml.SmallUML.Methode");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_10());
		}
		otherlv_11='Cardinalites'
		{
			newLeafNode(otherlv_11, grammarAccess.getClasseAccess().getCardinalitesKeyword_11());
		}
		otherlv_12='{'
		{
			newLeafNode(otherlv_12, grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_12());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClasseAccess().getCardinalitesCardinaliteParserRuleCall_13_0());
				}
				lv_cardinalites_13_0=ruleCardinalite
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClasseRule());
					}
					add(
						$current,
						"cardinalites",
						lv_cardinalites_13_0,
						"org.smalluml.SmallUML.Cardinalite");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_14());
		}
		otherlv_15='Sous-Classes'
		{
			newLeafNode(otherlv_15, grammarAccess.getClasseAccess().getSousClassesKeyword_15());
		}
		otherlv_16='{'
		{
			newLeafNode(otherlv_16, grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_16());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClasseAccess().getSousClassesClasseParserRuleCall_17_0());
				}
				lv_sousClasses_17_0=ruleClasse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClasseRule());
					}
					add(
						$current,
						"sousClasses",
						lv_sousClasses_17_0,
						"org.smalluml.SmallUML.Classe");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_18='}'
		{
			newLeafNode(otherlv_18, grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_18());
		}
		otherlv_19='Super-Classe'
		{
			newLeafNode(otherlv_19, grammarAccess.getClasseAccess().getSuperClasseKeyword_19());
		}
		otherlv_20='{'
		{
			newLeafNode(otherlv_20, grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_20());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClasseRule());
					}
				}
				otherlv_21=RULE_ID
				{
					newLeafNode(otherlv_21, grammarAccess.getClasseAccess().getSuperClasseClasseCrossReference_21_0());
				}
			)
		)
		otherlv_22='}'
		{
			newLeafNode(otherlv_22, grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_22());
		}
		otherlv_23='}'
		{
			newLeafNode(otherlv_23, grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_23());
		}
	)
;

// Entry rule entryRuleAttribut
entryRuleAttribut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributRule()); }
	iv_ruleAttribut=ruleAttribut
	{ $current=$iv_ruleAttribut.current; }
	EOF;

// Rule Attribut
ruleAttribut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Attribut'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributAccess().getAttributKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributAccess().getNomAttributEStringParserRuleCall_2_0());
				}
				lv_nomAttribut_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributRule());
					}
					set(
						$current,
						"nomAttribut",
						lv_nomAttribut_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getAttributAccess().getTypeTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAttributAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMethode
entryRuleMethode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodeRule()); }
	iv_ruleMethode=ruleMethode
	{ $current=$iv_ruleMethode.current; }
	EOF;

// Rule Methode
ruleMethode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Methode'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodeAccess().getMethodeKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodeRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getMethodeAccess().getTypeDeRetourTypeCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodeAccess().getNomMethodeEStringParserRuleCall_3_0());
				}
				lv_nomMethode_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodeRule());
					}
					set(
						$current,
						"nomMethode",
						lv_nomMethode_3_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getMethodeAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodeAccess().getParametresAttributParserRuleCall_5_0());
				}
				lv_parametres_5_0=ruleAttribut
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodeRule());
					}
					add(
						$current,
						"parametres",
						lv_parametres_5_0,
						"org.smalluml.SmallUML.Attribut");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMethodeAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getMethodeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getElementAccess().getNomElementEStringParserRuleCall_0());
			}
			lv_nomElement_0_0=ruleEString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getElementRule());
				}
				set(
					$current,
					"nomElement",
					lv_nomElement_0_0,
					"org.smalluml.SmallUML.EString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleCardinalite
entryRuleCardinalite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCardinaliteRule()); }
	iv_ruleCardinalite=ruleCardinalite
	{ $current=$iv_ruleCardinalite.current; }
	EOF;

// Rule Cardinalite
ruleCardinalite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getCardinaliteAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCardinaliteAccess().getMultipliciteEStringParserRuleCall_1_0());
				}
				lv_multiplicite_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCardinaliteRule());
					}
					set(
						$current,
						"multiplicite",
						lv_multiplicite_1_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getCardinaliteAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleTypeDonnee
entryRuleTypeDonnee returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDonneeRule()); }
	iv_ruleTypeDonnee=ruleTypeDonnee
	{ $current=$iv_ruleTypeDonnee.current; }
	EOF;

// Rule TypeDonnee
ruleTypeDonnee returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TypeDonnee'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDonneeAccess().getTypeDonneeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDonneeAccess().getNomTypeEStringParserRuleCall_1_0());
				}
				lv_nomType_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDonneeRule());
					}
					set(
						$current,
						"nomType",
						lv_nomType_1_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeDonneeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDonneeAccess().getAttributsAttributParserRuleCall_3_0());
				}
				lv_attributs_3_0=ruleAttribut
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDonneeRule());
					}
					add(
						$current,
						"attributs",
						lv_attributs_3_0,
						"org.smalluml.SmallUML.Attribut");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeDonneeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	iv_ruleEnumeration=ruleEnumeration
	{ $current=$iv_ruleEnumeration.current; }
	EOF;

// Rule Enumeration
ruleEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Enumeration'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerationAccess().getEnumerationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationAccess().getNomEnumerationEStringParserRuleCall_1_0());
				}
				lv_nomEnumeration_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationRule());
					}
					set(
						$current,
						"nomEnumeration",
						lv_nomEnumeration_1_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationAccess().getElementsElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"org.smalluml.SmallUML.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleChaine
entryRuleChaine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChaineRule()); }
	iv_ruleChaine=ruleChaine
	{ $current=$iv_ruleChaine.current; }
	EOF;

// Rule Chaine
ruleChaine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_nomType_0_0='Chaine'
			{
				newLeafNode(lv_nomType_0_0, grammarAccess.getChaineAccess().getNomTypeChaineKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getChaineRule());
				}
				setWithLastConsumed($current, "nomType", lv_nomType_0_0, "Chaine");
			}
		)
	)
;

// Entry rule entryRuleEntier
entryRuleEntier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntierRule()); }
	iv_ruleEntier=ruleEntier
	{ $current=$iv_ruleEntier.current; }
	EOF;

// Rule Entier
ruleEntier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_nomType_0_0='Entier'
			{
				newLeafNode(lv_nomType_0_0, grammarAccess.getEntierAccess().getNomTypeEntierKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEntierRule());
				}
				setWithLastConsumed($current, "nomType", lv_nomType_0_0, "Entier");
			}
		)
	)
;

// Entry rule entryRuleBooleen
entryRuleBooleen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleenRule()); }
	iv_ruleBooleen=ruleBooleen
	{ $current=$iv_ruleBooleen.current; }
	EOF;

// Rule Booleen
ruleBooleen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_nomType_0_0='Booleen'
			{
				newLeafNode(lv_nomType_0_0, grammarAccess.getBooleenAccess().getNomTypeBooleenKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleenRule());
				}
				setWithLastConsumed($current, "nomType", lv_nomType_0_0, "Booleen");
			}
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
